import time
import threading


CAPACITY = 10

full = threading.Semaphore(0)
empty = threading.Semaphore(CAPACITY)
mutex = threading.Semaphore()

buffer = [-1 for _ in range(CAPACITY)]

in_cnt, out_cnt = 0, 0

class Producer(threading.Thread):
    def run(self):
        global full, empty, mutex, CAPACITY, buffer
        global in_cnt, out_cnt
        
        item_produced = 0
        counter  = 0
        
        while item_produced < 20:
            empty.acquire()
            mutex.acquire()
            
            buffer[in_cnt] = counter
            in_cnt = (in_cnt + 1) % CAPACITY
            print("Producer: {} produced".format(counter))
            counter += 1
            
            mutex.release()
            full.release()
            
            item_produced += 1
            time.sleep(0.05)

class Consumer(threading.Thread):
    def run(self):
        global buffer, CAPACITY, full, empty, mutex
        global out_cnt, in_cnt
        
        item_consumed = 0
        while item_consumed < 20:
            full.acquire()
            mutex.acquire()
            
            item  = buffer[out_cnt]
            out_cnt = (out_cnt +1) % CAPACITY
            print("Consumer: consumed :{}".format(item))
            
            mutex.release()
            empty.release()
            
            item_consumed += 1
            time.sleep(.05)


if __name__ == "__main__":
    producer = Producer()
    consumer = Consumer()
    
    producer.start()
    consumer.start()
    
    producer.join()
    consumer.join()
    
    time.sleep(3)
    

