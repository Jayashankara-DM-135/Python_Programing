https://engineering.contentsquare.com/2018/multithreading-vs-multiprocessing-in-python/

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Synchronous VS Asynchronus

The basic idea is:

On a s̲y̲n̲c̲h̲r̲o̲n̲o̲u̲s̲ request, you make the request and stop executing your program until you get a response from the HTTP server 
(or an error if the server can't be reached, or a timeout if the sever is taking way, way too long to reply) 
The interpreter is blocked until the request is completed (until you got a definitive answer of what happened with the request: 
did it go well? was there an error? a timeout?... ).

On a̲s̲y̲n̲c̲h̲r̲o̲n̲o̲u̲s̲ requests, you "launch" the request, and you kind of "forget about it", meaning: 
The interpreter continues executing the code after the request is made without waiting for the request to be completed.

This seems... rather pointless, right? You send the request "to the void of space", and continue executing as usual? What happens when the server sends you its response? 
I made a request, and I wanna know what happened to it! Otherwise, I wouldn't have typed that in my code to begin with!!

Well, here's where the callback comes in. You launch the request "to the void of space" BUT you provide a callback function so when the HTTP server
on the other end sends you its response, that function is run with said response as the first argument.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Concurrency VS Parallesim:

Concurrency means that an application is making progress on more than one task at the same time (concurrently). 
Well, if the computer only has one CPU the application may not make progress on more than one task at exactly the same time, 
but more than one task is being processed at a time inside the application. It does not completely finish one task before it begins the next.

Parallelism requires hardware with multiple processing units, essentially. 
In single-core CPU, you may get concurrency but NOT parallelism. Parallelism is a specific kind of concurrency where tasks are really executed simultaneously.


Concurrency is about dealing with lots of things at once. Parallelism is about doing lots of things at once.

An application can be concurrent — but not parallel, which means that it processes more than one task at the same time, 
                                   but no two tasks are executing at the same time instant.
                                   
An application can be parallel — but not concurrent, which means that it processes multiple sub-tasks of a task in multi-core CPU at the same time.

An application can be neither parallel — nor concurrent, which means that it processes all tasks one at a time, sequentially.

An application can be both parallel — and concurrent, which means that it processes multiple tasks concurrently in multi-core CPU at the same time.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Threading V/S Process:

The threading module uses threads, the multiprocessing module uses processes. 
The difference is that threads run in the same memory space, while processes have separate memory. 
This makes it a bit harder to share objects between processes with multiprocessing. 
Since threads use the same memory, precautions have to be taken or two threads will write to the same memory at the same time. 
This is what the global interpreter lock is for.

Spawning processes is a bit slower than spawning threads

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Diff b/w Multicore and Multiprocessor:

Each CPU/Processor can have more oen core.

Multocore:
It is a single computing component(CPU) with two or more separate processing units called cores. 
These cores can individually read and execute program instructions. It means that the system has one CPU with multiple cores. 
They work in such a way that it feels like the computer system has several processors but in reality, they are the cores and not processors.

Advantages:

Since multiple CPU cores are placed on the same die, so in this case, cache coherency will be higher.
It allows higher performance at lower energy because the cores are very energy efficient.

Disadvantages:

If you are using a dual-core system, then its speed should be double than the single-core but in reality, you will get 70-80% more speed only.
Not every Operating System supports multi-core.

===================
Multiprocessor System:
two or more processors present in the same computer, sharing the system bus, memory, and other I/O is said to be Multiprocessing System.

Suppose, we are having 5 processes P1, P2, P3, P4, and P5. In a uni-processor system, only one process can be executed at a time and after its execution,
the next process will be executed and so on. But in a multiprocessor system, the different process can be assigned to different processors and this,
in turn, decreases the overall process execution time by the system. 
A dual-processor system can execute two processes at a time while a quad-processor can execute four processes at a time

Suppose, we are having 5 processes P1, P2, P3, P4, and P5. In a uni-processor system, only one process can be executed at a time and after its execution, 
the next process will be executed and so on. But in a multiprocessor system, the different process can be assigned to different processors and this, in turn, 
decreases the overall process execution time by the system. 
A dual-processor system can execute two processes at a time while a quad-processor can execute four processes at a time.
===================
Lets have 2 CPU/Processor/Socket and Each CPU has two core.

Total : 2 (CPU) * 2 cores per CPU = 4 cores ==> Means max 4 thread can execute paralley. if there are more than 4 thread then schduling will kick in.

if you run one single-threaded application, it will be allocated to a single core(So CPU utilization will show 25%), and activate only a single HW thread on it. 
That thread will be able to utilize 100% of that core as there is no other thread running along with it. 
If you activate another application it will usually be allocated to another core(Now CPU utilization of system is 50%), and so on until you saturate the number of cores (here max is 4 core). 
Beyond that any additional thread will be scheduled to the same cores again using SMT. 

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Multi processing and multi threading are 2 different things. Unless you want to do IO based operations (e.g. HTTP requests, Reading from Queues/DB), 
then multithreading is no use for you, 
as python doesn't have a true multi threading. (you should read about multi threading in python, and about the GIL- Global Interperter Lock) 






