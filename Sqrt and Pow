Sqrt:
class Sloution:
    
    def mysqrt(self, num):
        if num < 2:
            return num
        
        left = 1
        right  = num // 2
        
        while left <= right:
            pivot = left + (right - left) // 2
            temp = pivot * pivot
            
            if temp > num:
                right = pivot - 1
            elif temp < num:
                left = pivot + 1
            else:
                return pivot
        
        return right

obj = Sloution()
print(obj.mysqrt(9))


===================
Pow(x, y)

class Solution:
    
    def mypowHelper(self, x, n):
        if n == 0:
            return 1
        
        temp = self.mypowHelper(x, n//2)
        
        if n%2 == 0:
            return temp * temp
        else:
            return x * temp * temp
        
        
    
    def myPow(self, x: float, n: int) -> float:
        if n >= 0:
            return self.mypowHelper(x, n)
        
        return 1/(self.mypowHelper(x, -n))
        
